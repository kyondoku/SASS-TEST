.container {
    $size: 100px;
    .item {
        width: $size * 4;
        height: $size;
        background: tomato;
    }
}

// 중첩 안에서 & 키워드는 상위(부모) 선택자를 참조하여 치환한다.

.btn {
    position: absolute;
    &.active {
        color: red;
    }
}

.list {
    li{
        &:last-child { // & : li
            margin-right: 0;
        }
    }
}


// sass

.btn {
    width: 100px;
    height: 100px;
    &.active {
        color: red;
    }
}

.fs {
  &-small {
      font-size: 14px;
  }  
  &-medium {
      font-size: 16px;
  }
  &-large {
      font-size: 18px;
  }
}

// css

.btn {
    width: 100px;
    height: 100px;
  }
  
  .btn.active {
    color: red;
  }
  
  .fs-small {
    font-size: 14px;
  }
  
  .fs-medium {
    font-size: 16px;
  }
  
  .fs-large {
    font-size: 18px;
  }
  
  // 중첩에서 벗어나고 싶을 때 @at-root 키워드를 사용한다.
  // 중첩 안에서 생성하되 중첩 밖에서 사용해야하는 경우에 유용하다.

  .list {
      $w: 100px; // $~~ : 변수
      $h: 50px;
      li {
          width: $w;
          height: $h;
      }
      @at-root .box {
          width: $w;
          height: $h;
      }
  }

  // compiled to
  .list li {
      width: 100px;
      height: 50px;
  }
  .box {
      width: 100px;
      height: 50px;
  }

  // font-, margin- 등과 같이 동일한 네임 스페이스를 가지는 속성들을 다음과 같이 사용할 수 있다.

  .box {
      font: {
          size: 10px;
          family: sans-serif;
      };
      margin: {
          top: 10px;
          left: 20px;
      }
  }

  // 반복적으로 사용되는 값을 변수로 지정할 수 있다. 변수는 사용 가능한 유효범위가 있음(선언된 블록 내)
  // $변수이름: 속성값;

  $color-primary: #e96900;
  $url-images: "/assets/images/";
  $w: 200px;

  .box {
      width: $w;
      margin-left: $w;
      background: $color-primary url($url-images + "bg.jpg");
  }

  // 변수 재할당

  $red: #FF0000;
  $color-primary: $blue;
  
  // !global 플래그를 사용하면 변수의 유효범위를 전역(Global)로 설정할 수 있다.

  .box1{
      $color: #111 !global;
      background: $color;
  }

  .box2 {
      background: $color;
  }

  // 주의해야할 케이스

  // SCSS
  $color: #000;

  .box1 {
      $color: #111 !global;
      background: $color;
  }

  .box2 {
      background: $color;
  }

  .box3 {
      $color: #222;
      background: $color;
  }

  //CSS
  .box1 {
    background: #111;
  }
  
  .box2 {
    background: #111;
  }
  
  .box3 {
    background: #222;
  }
  
  // !default 플래그는 할당되지 않은 변수의 초깃값을 설정한다.
  // 즉 할당되어있는 변수가 있다면 변수가 기존 할당 값을 사용한다.

  $color-primary: red;
  
  .box {
      $color-primary: blue !default; // 이미 값이 존재한다면 그 값을 사용하겠다.
      background: $color-primary;
  }

  // 문자 보간 : #{}를 이용해서 코드의 어디든지 변수 값을 넣을 수 있다.
  $family: unquote($string: "Droid+Sans"); // Sass 내장함수 unquote()는 문자에서 따옴표를 제거한다.
  @import url("http://fonts.googleapis.com/css?family=#{$family}");


  // @import로 외부에서 가져온 Sass 파일은 모두 단일 CSS 출력 파일로 병합된다.

  @import "hello.css"; // 파일 확장자가 .css일 때
  @import "http://hello.com/hello"; // 파일 이름이 http://로 시작하는 경우
  @import url(hello); // url()이 붙었을 경우
  @import "hello" screen; // 미디어쿼리가 있는 경우
  @import "header", "footer"; // 여러 파일을 가져올 수도 있다. header.scss..


  // 프로젝트 규모가 커지만 파일들을 header나 side-menu 같이 각 기능과 부분으로 나눠 관리하게 된다.
  // 그러면 파일이 점점 많아지고, 모든 파일이 컴파일 시 각각의 ~.css 파일로 나눠서 저장되면 관리/성능 문제
  // Sass는 Partials 기능을 지원하는데
  // 파일 이름 앞에 _를 붙여 (_header.scss) @import로 가져오면 컴파일 시 ~.css로 컴파일하지 않는다.
  
  //Sass-App
  //    # ...
  //    |--scss
  //    |   |--_header.scss
  //    |   |--_side-menu.scss
  //    |   |--main.scss


  // 만약에 main.scss에서
  @import "header", "side-menu";

  // 컴파일하면

  //Sass-App
  //    # ...
  //    |--css
  //    |   |--main.css #main + header + side-menu
  //    |--scss
  //    |   |--_header.scss
  //    |   |--_side-menu.scss
  //    |   |--main.scss


