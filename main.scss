.container {
    $size: 100px;
    .item {
        width: $size * 4;
        height: $size;
        background: tomato;
    }
}

// 중첩 안에서 & 키워드는 상위(부모) 선택자를 참조하여 치환한다.

.btn {
    position: absolute;
    &.active {
        color: red;
    }
}

.list {
    li{
        &:last-child { // & : li
            margin-right: 0;
        }
    }
}


// sass

.btn {
    width: 100px;
    height: 100px;
    &.active {
        color: red;
    }
}

.fs {
  &-small {
      font-size: 14px;
  }  
  &-medium {
      font-size: 16px;
  }
  &-large {
      font-size: 18px;
  }
}

// css

.btn {
    width: 100px;
    height: 100px;
  }
  
  .btn.active {
    color: red;
  }
  
  .fs-small {
    font-size: 14px;
  }
  
  .fs-medium {
    font-size: 16px;
  }
  
  .fs-large {
    font-size: 18px;
  }
  
  // 중첩에서 벗어나고 싶을 때 @at-root 키워드를 사용한다.
  // 중첩 안에서 생성하되 중첩 밖에서 사용해야하는 경우에 유용하다.

  .list {
      $w: 100px; // $~~ : 변수
      $h: 50px;
      li {
          width: $w;
          height: $h;
      }
      @at-root .box {
          width: $w;
          height: $h;
      }
  }

  // compiled to
  .list li {
      width: 100px;
      height: 50px;
  }
  .box {
      width: 100px;
      height: 50px;
  }

  // font-, margin- 등과 같이 동일한 네임 스페이스를 가지는 속성들을 다음과 같이 사용할 수 있다.

  .box {
      font: {
          size: 10px;
          family: sans-serif;
      };
      margin: {
          top: 10px;
          left: 20px;
      }
  }

  // 반복적으로 사용되는 값을 변수로 지정할 수 있다. 변수는 사용 가능한 유효범위가 있음(선언된 블록 내)
  // $변수이름: 속성값;

  $color-primary: #e96900;
  $url-images: "/assets/images/";
  $w: 200px;

  .box {
      width: $w;
      margin-left: $w;
      background: $color-primary url($url-images + "bg.jpg");
  }

  // 변수 재할당

  $red: #FF0000;
  $color-primary: $blue;
  
  // !global 플래그를 사용하면 변수의 유효범위를 전역(Global)로 설정할 수 있다.

  .box1{
      $color: #111 !global;
      background: $color;
  }

  .box2 {
      background: $color;
  }

  // 주의해야할 케이스

  // SCSS
  $color: #000;

  .box1 {
      $color: #111 !global;
      background: $color;
  }

  .box2 {
      background: $color;
  }

  .box3 {
      $color: #222;
      background: $color;
  }

  //CSS
  .box1 {
    background: #111;
  }
  
  .box2 {
    background: #111;
  }
  
  .box3 {
    background: #222;
  }
  
  // !default 플래그는 할당되지 않은 변수의 초깃값을 설정한다.
  // 즉 할당되어있는 변수가 있다면 변수가 기존 할당 값을 사용한다.

  $color-primary: red;
  
  .box {
      $color-primary: blue !default; // 이미 값이 존재한다면 그 값을 사용하겠다.
      background: $color-primary;
  }

  // 문자 보간 : #{}를 이용해서 코드의 어디든지 변수 값을 넣을 수 있다.
  $family: unquote($string: "Droid+Sans"); // Sass 내장함수 unquote()는 문자에서 따옴표를 제거한다.
  @import url("http://fonts.googleapis.com/css?family=#{$family}");


  // @import로 외부에서 가져온 Sass 파일은 모두 단일 CSS 출력 파일로 병합된다.

  @import "hello.css"; // 파일 확장자가 .css일 때
  @import "http://hello.com/hello"; // 파일 이름이 http://로 시작하는 경우
  @import url(hello); // url()이 붙었을 경우
  @import "hello" screen; // 미디어쿼리가 있는 경우
  @import "header", "footer"; // 여러 파일을 가져올 수도 있다. header.scss..


  // 프로젝트 규모가 커지만 파일들을 header나 side-menu 같이 각 기능과 부분으로 나눠 관리하게 된다.
  // 그러면 파일이 점점 많아지고, 모든 파일이 컴파일 시 각각의 ~.css 파일로 나눠서 저장되면 관리/성능 문제
  // Sass는 Partials 기능을 지원하는데
  // 파일 이름 앞에 _를 붙여 (_header.scss) @import로 가져오면 컴파일 시 ~.css로 컴파일하지 않는다.
  
  //Sass-App
  //    # ...
  //    |--scss
  //    |   |--_header.scss
  //    |   |--_side-menu.scss
  //    |   |--main.scss


  // 만약에 main.scss에서
  @import "header", "side-menu";

  // 컴파일하면

  //Sass-App
  //    # ...
  //    |--css
  //    |   |--main.css #main + header + side-menu
  //    |--scss
  //    |   |--_header.scss
  //    |   |--_side-menu.scss
  //    |   |--main.scss


  // Sass는 연산 기능을 지원한다.

  // 기본연산자 +, -, *, /, %
  // * -> 하나 이상의 값이 반드시 숫자
  // / -> 오른쪽 값이 반드시 숫자

  // 비교연산자 ==, !=, <, >, <=, >=
  // 논리연산자 and, or, not


  // 숫자(Numbers)
  
  // #상대적 단위 연산
  //  : 일반적으로 절댓값을 나타내는 px단위로 연상을 하지만, 상대적 단위(%, em, vw 등)의 연산의 경우 CSS calc()로 연산해야함
  // width: 50% - 20px; => 단위 모순 에러
  // width: calc(50% - 20px); => 연산가능

  // #나누기 연산의 주의사항
  //  : CSS는 속성 값의 숫자를 분리하는 방법으로 /를 허용하기 때문에 /가 나누기 연산으로 사용되지 않을수 있다.
  //    예를 들어, font: 16px / 22px serif; 같은 경우 
  //    font-size: 16px와 line-height: 22px의 속성값 분리를 위해 /를 사용합니다.

  // SCSS
  div {
      width: 20px + 20px; // => 40px
      height: 40px - 10px; // => 30px
      font-size: 10px * 2; // => 20px
      margin: 30px / 2; // 30px / 2 (????)
  }

  // /를 나누기 연산기능으로 사용하려면
  // 1. 값 또는 그 일부가 변수에 저장되거나 함수에 의해 반환되는 경우
  // 2. 값이 ()로 묶여있는 경우
  // 3. 값이 다른 산술 표현식의 일부로 사용되는 경우

  div {
      $x: 100px;
      width : $x / 2; // 변수에 저장된 값을 나누기
      height: (100px / 2); // 괄호로 묶어서 나누기
      font-size: 10px + 12px / 3; // 더하기 연산과 같이 사용
  }


  // 문자(Strings)
  // 문자연산에는 + 가 사용된다.
  // 문자 연산의 결과는 첫번째 피연산자를 기준으로 한다.
  // 첫번째 피연산자에 따옴표가 붙어있다면 연산 결과를 따옴표로 묶고,
  // 첫번째 피연산자에 따옴표가 붙어있지 않다면 연산결과도 따옴표로 처리하지 않는다.

  // SCSS
  div::after {
      content: "Hello " + World;
      flex-flow: row + "-reverse" + " " + wrapl
  }

  // CSS
  div::after {
      content: "Hello World";
      flex-flow: row-reverse wrap;
  }


  // 색상(Colors) 연산
  // SCSS

  div {
      color: #123456 + #345678;
      // R: 12 + 34 = 46
      // G: 34 + 56 = 8a
      // B: 56 + 78 = ce
      background: rgba(50, 100, 150, .5) + rgba(10, 20, 30, .5); // 투명도는 같아야함
  }

  // Alpha(투명도) 값을 연산하고 싶다면 opacify(), transparentize() 활용
  // SCSS
  $color: rgba(10, 20, 30, .5);
  div {
      color: opacify($color, .3); // 30% 더 불투명하게 / 0.5 + 0.3
      background-color: transparentize($color, .2); // 20% 더 투명하게 / 0.5 - 0.2 = 0.3
  }


  // 논리(Boolean) 연산

  // SCSS
  $w: 100px;
  .item {
      display: block;
      @if ($w > 50px and $w > 90px) {
        width: 400px;
      }
      @if not ($w > 50px and $w > 90px) {
        height: 400px;
      }
  }

  //CSS
  .item {
    display: block;
    width: 400px;
  }
  

// 재활용(Mixins)
// 스타일시트 전체에서 재사용 할 CSS 선언 그룹을 정의하는 기능
// 선언하기(@Mixin)와 포함하기(@include)

// @mixin

// SCSS
@mixin large-text {
    font-size: 22px;
    font-weight: bold;
    font-family: sans-serif;
    color: orange;
}

//Sass
// =large-text
//   font-size: 22px
//   font-weight: bold
//   font-family: sans-serif
//   color: orange

// SCSS
@mixin size ($w: 100px, $h: 100px) {
    // $w, $h가 기본이지만 디폴트값 주고 싶을때 위처럼
    width: $w;
    height: $h;
}

.box1 {
    @include size(200px, 400px);
}
.box2 {
    @include size($h: 300px);
}
.box3 {
    @include size;
}

// CSS

.box1 {
    width: 200px;
    height: 400px;
}
  
.box2 {
    width: 100px;
    height: 300px;
}
  
.box3 {
    width: 100px;
    height: 100px;
}

// Mixin은 선택자를 포함 가능하고 상위(부모) 요소 참조도 할수 있다.

@mixin large-text {
    font: {
        size: 22px;
        weight: bold;
        family: sans-serif;
    }
    color: orange;

    &::after {
        content: "!!";
    }
    
    span.icon {
        background: url("/images/icon.png");
    }
}

.box1 {
    @include large-text;
} 

.box2 {
    @include large-text;
}

// CSS

.box1 {
    font-size: 22px;
    font-weight: bold;
    font-family: sans-serif;
    color: orange;
  }
  
  .box1::after {
    content: "!!";
  }
  
  .box1 span.icon {
    background: url("/images/icon.png");
  }
  
  .box2 {
    font-size: 22px;
    font-weight: bold;
    font-family: sans-serif;
    color: orange;
  }
  
  .box2::after {
    content: "!!";
  }
  
  .box2 span.icon {
    background: url("/images/icon.png");
  }
  

  // 인수

  // SCSS
  @mixin dash-line($width: 1px, $color: black) {
      border: $width dashed $color;
  } 

  .box1 { @include dash-line; }
  .box2 { @include dash-line(4px, blue); }

  // 인수 - 키워드 인수
  // @mixin 믹스인이름($매개변수A: 기본값, $매개변수B: 기본값) {
  //    스타일;
  // }
  
  // @include 믹스인이름($매개변수B: 인수)

  .box3 { @include dash-line($color: blue); }


  // CSS
  .box1 {
    border: 1px dashed red;
  }
  .box2 {
    border: 4px dashed blue;
  }
  .box3 {
    border: 1px dashed blue;
  }  


  // 가변 인수
@mixin var ($w, $h, $bg...) {
    width: $w;
    height: $h;
    background: $bg;
}

.box {
    @include var(
        100px, 
        200px, 
        url("image/a.png") no-repeat 10px 20px,
        url("image/b.png") no-repeat,
        url("image/c.png")
    );
}

@mixin font(
    $style: normal,
    $weight: normal,
    $size: 16px,
    $family: sans-serif
) {
    font: {
        style: $style;
        weight: $weight;
        size: $size;
        family: $family;
    }
}

div {
    // 매개변수 순서와 개수에 맞게 전달
    $font-values: italic, bold, 16px, sans-serif;
    @include font($font-values...);
}
span {
    // 필요한 값만 키워드 인수로 변수에 담아 전달
    $font-values: (style: italic, size: 22px);
    @include font($font-values...);
}
a {
    // 필요한 값만 키워드 인수로 전달
    @include font((weight: 900, family: monospace)...);
}
  

// CSS

.box {
    width: 100px;
    height: 200px;
    background: url("image/a.png") no-repeat 10px 20px, url("image/b.png") no-repeat, url("image/c.png");
  }
  
  div {
    font-style: italic;
    font-weight: bold;
    font-size: 16px;
    font-family: sans-serif;
  }
  
  span {
    font-style: italic;
    font-weight: normal;
    font-size: 22px;
    font-family: sans-serif;
  }
  
  a {
    font-style: normal;
    font-weight: 900;
    font-size: 16px;
    font-family: monospace;
  }
  

  // @Content
  // 선언된 Mixin에 @Content가 포함되어 있다면 해당 부분에 원하는 스타일 블록을 전달할 수 있다.
  // 이 방식을 사용하여 기존 Mixin이 가지고 있는 기능에 선택자나 속성 등을 추가할 수 있다.

  @mixin icon($url) {
    &::after {
        content: $url;
        @content;
    }
}

.box1 {
    @include icon("image/icon1.png");
}

.box2 {
    @include icon("image/icon2.png") {
        display: block;
        position: absolute;
        width: 100px;
        height: 100px;
    };
}

// CSS

@mixin icon($url) {
    &::after {
        content: $url;
        @content;
    }
}

.box1 {
    @include icon("image/icon1.png");
}

.box2 {
    @include icon("image/icon2.png") {
        display: block;
        position: absolute;
        width: 100px;
        height: 100px;
    };
}


// 확장(Extend)
// 특정 선택자가 다른 선택자의 모든 스타일을 가져야할때 사용, 상속 개념과 유사

// SCSS
.btn {
    padding: 10px;
    margin: 10px;
    background: blue;
}
.btn-danger {
    @extend .btn;
    background: red;
}

// CSS

.btn, .btn-danger {
    padding: 10px;
    margin: 10px;
    background: blue;
}
  
  .btn-danger {
    background: red;
}
  
// 그럼에도 확장을 추천하지 않는 이유
// , 로 구분하는 다중선택자가 만들어진다.
// 고려해야 하는 사항들
// 1. 내 현재 선택자(위의 .btn-danger)가 어디에 첨부될 것인가?
// 2. 원치 않는 부작용이 초래될 수도 있는가?
// 3. 한번의 확장으로 얼마나 큰 CSS가 생성되는가?

// 따라서 권장하지 않는다. Mixin을 대체 기능으로 사용하는것이 더 좋음

.container {
    width: 300px;
    height: 300px;
    background: red;
    .item {
        width: 200px;
        height: 200px;
        background: blue;
        .icon {
            width: 100px;
            height: 100px;
            background: green;
        }
    }
}

.wrapper {
    .new-icon {
        @extend .icon;
    }
}

// CSS

.container {
    width: 300px;
    height: 300px;
    background: red;
  }
  
  .container .item {
    width: 200px;
    height: 200px;
    background: blue;
  }
  
  .container .item .icon, .container .item .wrapper .new-icon, .wrapper .container .item .new-icon {
    width: 100px;
    height: 100px;
    background: green;
  }
  